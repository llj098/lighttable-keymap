;; User keymap
;; -----------------------------
;; Keymaps are stored as a set of diffs that are merged together together
;; to create the final set of keys. You can modify these diffs to either add
;; or subtract bindings.
;;
;; Like behaviors, keys are bound by tag. When objects with those tags are active
;; the key bindings are live. Keys can be bound to any number of Light Table commands,
;; allowing you the flexibility to execute multiple operations together. To see a list
;; of all the commands you can execute, start typing a word related to the thing you
;; want to do in between the square brackets (e.g. type "editor").

{:+ {:app {"cmd-k" [:workspace.show]

           ;;Tabset shortcuts
           "ctrl-shift-]" [:tabset.next]
           "ctrl-shift-[" [:tabset.prev]
           "cmd-alt-=" [:tabset.new]
           "cmd-alt--" [:tabset.close]}

     :editor {"alt-w" [:editor.watch.watch-selection]
              "alt-shift-w" [:editor.watch.unwatch]

              ;;Real cheesey line duplicator
              "cmd-shift-d" [:editor.select-line
                             :editor.copy
                             :editor.selection.clear
                             :editor.new-line-indent
                             :editor.paste
                             :smart-indent-selection]

              ;;Comment toggling
              "cmd-/" [:toggle-comment-selection]

              ;;Push parens left or right (Slurp)
              "ctrl-shift-9" [:paredit.grow.left]
              "ctrl-shift-0" [:paredit.grow.right]

              ;;Shrink parens inward (Barf)
              "ctrl-shift-." [:paredit.shrink.left]
              "ctrl-shift-," [:paredit.shrink.right]

              ; paredit kill
              "alt-d" [:paredit-plus.kill]
              
              ;Sexp killing backward
              "alt-r" [:paredit-plus.splice-sexp-killing-backward]
              
              ;;Eval the parent ( ... )
              "alt-enter" [(:paredit.select.parent "(")
                           :eval-editor-form
                           :paredit.select.clear]

              ;;Select the parent expression, whether that's [], {}, or ()
              "shift-alt-s" [:paredit.select.parent]

              ;;Format the parent ()
              "alt-s" [(:paredit.select.parent "(")
                       :smart-indent-selection
                       :paredit.select.clear]}

     :filter-list.input {;;Navigate the command menu with ctrl key.
                         "ctrl-n" [(:filter-list.input.move-selection 1)],
                         "ctrl-p" [(:filter-list.input.move-selection -1)]}}}
